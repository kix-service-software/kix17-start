# --
# Modified version of the work: Copyright (C) 2006-2024 KIX Service Software GmbH, https://www.kixdesk.com
# based on the original work of:
# Copyright (C) 2001-2024 OTRS AG, https://otrs.com/
# --
# This software comes with ABSOLUTELY NO WARRANTY. For details, see
# the enclosed file LICENSE for license information (AGPL). If you
# did not receive this file, see https://www.gnu.org/licenses/agpl.txt.
# --


[% RenderBlockStart("ProgressBar") %]
<div class="LayoutPopup ARIARoleMain">
    <div class="Header">
        <h1>[% Translate(Data.Title) %]</h1>
    </div>
    <div class="Content">
        <div class="TaskBox">
            <div class="TaskBarBox">
                <div class="TaskBarCountBox">
                    <span id="TaskBarCount" class="TaskBarCount">0</span>
                    <span class="TaskBarCount">/[% Data.MaxCount %]</span>
                </div>
                <div class="TaskBar">
                    <div class="TaskBarColor"></div>
                </div>
            </div>
             <div class="TaskSpin">
                <i class="fa fa-spinner fa-spin fa-2x fa-fw"></i>
                <span class="TaskText">[% Translate(Data.LoaderText) %]</span>
            </div>
[% RenderBlockStart("IgnoredObjects") %]
            <div class="TaskIgnored">
                <span class="TaskText">[% Data.IgnoredText %]</span>
            </div>
[% RenderBlockEnd("IgnoredObjects") %]
[% RenderBlockStart("TaskAbort") %]
            <div class="TaskAbortBtn">
                <button id="TaskAbort" class="Primary CallForAction" type="button">
                    <span>[% Translate("Cancel") %]</span>
                </button>
            </div>
[% RenderBlockEnd("TaskAbort") %]
        </div>
    </div>
[% WRAPPER JSOnDocumentComplete %]
    <script type="text/javascript">//<![CDATA[
        var ProgressID = setInterval (function(){
                ProgressInformations();
            }, '[% Data.RefreshCycle %]' );

        function ProgressInformations(){
            var URL         = "Action=ProgressBarAJAXHandler;Subaction=AJAXUpdate;TaskName=[% Data.TaskName %];TaskType=[% Data.TaskType %][% Data.Session | html %]",
                MaxCount    = '[% Data.MaxCount %]',
                ParamData   = '[% Data.EndParam %]',
                Data;

            Core.AJAX.FunctionCall(Core.Config.Get('CGIHandle'), URL, function (Result) {
                Data = JSON.parse(Result);
            }, 'text', false);

            $('#TaskBarCount').html(MaxCount-Data.Count);
            $('.TaskBarColor').css('width', (((MaxCount-Data.Count)/MaxCount)*100) + '%');

            if ( Data.Count == 0) {
                clearInterval(ProgressID);
                var URLOP = "?Action=[% Data.Action %][% Data.Session | html %]";

                if ( ParamData ) {
                    $.each(JSON.parse(ParamData), function(Key, Value){
                        URLOP += ";" + Key + "=" + Value;
                    });
                }
                $(window).off('beforeunload.Popup');
                window.location.href = URLOP;
            }
        }

        $('#TaskAbort').on('click', function() {
            var Data = {
                    Action: 'ProgressBarAJAXHandler',
                    Subaction: 'ProgressAbort',
                    TaskName: '[% Data.TaskName %]',
                    TaskType: '[% Data.TaskType %]',
                },
                ParamData   = '[% Data.EndParam %]',
                URLOP       = "?Action=[% Data.Action %];Subaction=[% Data.AbortSubaction %][% Data.Session | html %]";
            clearInterval(ProgressID);

            Core.AJAX.FunctionCall(
                Core.Config.Get('Baselink'),
                Data,
                function(){
                    if ( ParamData ) {
                        $.each(JSON.parse(ParamData), function(Key, Value){
                            if ( Key === 'FormID' || Key === 'UserID' ) {
                                URLOP += ";" + Key + "=" + Value;
                            }
                        });
                    }
                    window.location.href = URLOP;
                }
            );
        });
        Core.UI.Popup.InitClosedBulkHandler('[% Data.Action %]', '[% Data.FormID %]', '#TaskAbort', {'Name':'[% Data.TaskName %]', 'Type': '[% Data.TaskType %]'});
    //]]></script>
[% END %]
</div>
[% RenderBlockEnd("ProgressBar") %]
[% RenderBlockStart("ProgressStopped") %]
<div class="LayoutPopup ARIARoleMain">
    <div class="Header">
        <h1>[% Translate(Data.Title) %]</h1>
    </div>
    <div class="Content">
        <div class="TaskBox">
            <div class="TaskAbort">
                <span id="TaskText">[% Translate("The current process has been canceled because no objects to be processed are available.") %]</span>
                <table>
                    <tr>
                        <td>[% Translate("passed Objects") %]</td>
                        <td>[% Data.ItemCount %]</td>
                    </tr>
                </table>
                <a class="PopupCancelClose" href="[% Env("Baselink") %]Action=[% Data.Action %];Subaction=[% Data.AbortSubaction %];[% Env("ChallengeTokenParam") | html %];[% Data.Params %][% Data.Session | html %]">[% Translate("Cancel & close") | html %]</a>
            </div>
        </div>
    </div>
</div>
[% RenderBlockEnd("ProgressStopped") %]