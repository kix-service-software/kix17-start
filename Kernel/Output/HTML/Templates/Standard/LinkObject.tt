# --
# Modified version of the work: Copyright (C) 2006-2024 KIX Service Software GmbH, https://www.kixdesk.com
# based on the original work of:
# Copyright (C) 2001-2024 OTRS AG, https://otrs.com/
# Copyright (C) 2019-2024 Rother OSS GmbH, https://otobo.de/
# --
# This software comes with ABSOLUTELY NO WARRANTY. This program is
# licensed under the AGPL-3.0 with patches licensed under the GPL-3.0.
# For details, see the enclosed files LICENSE (AGPL) and
# LICENSE-GPL3 (GPL3) for license information. If you did not receive
# this files, see https://www.gnu.org/licenses/agpl.txt (APGL) and
# https://www.gnu.org/licenses/gpl-3.0.txt (GPL3).
# --


[% RenderBlockStart("Plain") %]
[% Data.Content %]
[% RenderBlockEnd("Plain") %]

[% RenderBlockStart("Text") %]
<label for="Checkbox[% Data.Key | html %]" title="[% Data.Content | html %]" class="[% Data.Class | html %]" [% Data.CssStyle %]>[% Data.Content | truncate(Data.MaxLength) | html %]</label>
[% RenderBlockEnd("Text") %]

[% RenderBlockStart("TextTranslate") %]
<label for="Checkbox[% Data.Key | html %]" title="[% Translate(Data.Content) | html %]" class="[% Data.Class | html %]" [% Data.CssStyle %]>[% Data.Content | Translate | truncate(Data.MaxLength) | html %]</label>
[% RenderBlockEnd("TextTranslate") %]

[% RenderBlockStart("Link") %]
<a class="AsBlock LinkObjectLink [% Data.Class | html %]" href="[% Data.Link %]" title="[% Data.Title | html %]" [% Data.CssStyle %] >[% Data.Content | truncate(Data.MaxLength) | html %]</a>
[% RenderBlockEnd("Link") %]

[% WRAPPER JSOnDocumentComplete %]
<script type="text/javascript">//<![CDATA[
// Make sure that (only!) from a popup window, links are always opened in a new tab of the main window.
if (Core.UI.Popup.CurrentIsPopupWindow()) {
    $('a.LinkObjectLink').attr('target', '_blank');
}
//]]></script>
[% END %]


[% RenderBlockStart("TimeLong") %]
### Patch licensed under the GPL-3.0, Copyright (C) 2019-2024 Rother OSS GmbH, https://otobo.de/ ###
#<label for="Checkbox[% Data.Key | html %]" title="[% Data.Content | Localize("TimeLong") %]" class="[% Data.Class | html %]" [% Data.CssStyle %]>[% Data.Content | Localize("TimeLong") %]</label>
<label for="Checkbox[% Data.Key | html %]" title="[% Data.Content | Localize("TimeLong") | html %]" class="[% Data.Class | html %]" [% Data.CssStyle %]>[% Data.Content | Localize("TimeLong") | html %]</label>
### EO Patch licensed under the GPL-3.0, Copyright (C) 2019-2024 Rother OSS GmbH, https://otobo.de/ ###
[% RenderBlockEnd("TimeLong") %]

[% RenderBlockStart("Date") %]
### Patch licensed under the GPL-3.0, Copyright (C) 2019-2024 Rother OSS GmbH, https://otobo.de/ ###
#[% Data.Content | Localize("Date") %]
[% Data.Content | Localize("Date") | html %]
### EO Patch licensed under the GPL-3.0, Copyright (C) 2019-2024 Rother OSS GmbH, https://otobo.de/ ###
[% RenderBlockEnd("Date") %]

[% RenderBlockStart("Checkbox") %]
<input type="checkbox" name="[% Data.Name | html %]" id="Checkbox[% Data.Content | html %]" value="[% Data.Content | html %]" alt="[% Data.Title | html %]" title="[% Data.Title | html %]" class="[% Data.Class | html %]"
[% IF Data.Checked %]
    checked="checked"
[% END %]
    />
&nbsp;<br/>
[% RenderBlockEnd("Checkbox") %]

[% RenderBlockStart("InputText") %]
<input type="text" name="[% Data.Key | html %]" class="W50pc [% Data.Class | html %]" value="[% Data.Value | html %]"/>
[% RenderBlockEnd("InputText") %]

[% RenderBlockStart("TableSimpleNone") %]
[% Translate("none") | html %]
[% RenderBlockEnd("TableSimpleNone") %]

[% RenderBlockStart("TableSimple") %]
[% RenderBlockStart("TableSimpleType") %]
<h3 class="SpacingTopSmall">
</h3>
<ul class="Tablelike SpacingTopSmall">
    <li class="Header">[% Translate(Data.LinkTypeName) | html %]</li>
[% RenderBlockStart("TableSimpleTypeRow") %]
    <li class="[% Data.CssClass | html %]">[% Data.Content %]</li>
[% RenderBlockEnd("TableSimpleTypeRow") %]
</ul>
[% RenderBlockEnd("TableSimpleType") %]
[% RenderBlockEnd("TableSimple") %]

[% RenderBlockStart("TableComplex") %]
[% RenderBlockStart("TableComplexBlock") %]
[% IF !Data.AJAX.defined %]
<div class="WidgetSimple SpacingTop Expanded [% Data.CanDrag %]" id="Widget[% Data.Name | html %]">
[% END %]
    <div class="Header">
        <div class="ActionMenu">
[% IF Data.ColumnSetting %]
            <div class="WidgetAction Settings">
                <a id="SetColumnPreferences_[% Data.PreferencesID %]" title="[% Translate(Data.Blockname) | html %]" href="#">
                    <i class="fa fa-gear"></i>
                </a>
            </div>
            <div class="Clear"></div>
[% END %]
        </div>
        <div class="WidgetAction Toggle" title="[% Translate("Show or hide the content.") | html %]" ></div>
        <h2><span>[% Translate(Data.BlockDescription) | html %]: [% Translate(Data.Blockname) | html %]</span></h2>
    </div>
    <div id="ContentID_[% Data.PreferencesID %]" class="Content AutoHeight LinkObjectContent">
[% RenderBlockStart("TableComplexBlockActionRow") %]
    <div class="Bottom">
        <ul class="Actions">
[% RenderBlockStart("TableComplexBlockActionRowBulk") %]
            <li class="Bulk">
                <span>
                    <input type="checkbox" class="SelectAll" title="[% Translate("Select all") | html %]" id="SelectAllLinks[% Translate(Data.TableNumber) | html %]" autocomplete="off" />
                    <label class="Label" for="SelectAllLinks[% Translate(Data.TableNumber) | html %]">[% Translate("Select all") | html %]</label>
                </span>
            </li>
[% RenderBlockEnd("TableComplexBlockActionRowBulk") %]
        </ul>
        <div class="ClearLeft"></div>
    </div>
[% RenderBlockEnd("TableComplexBlockActionRow") %]
    <form action="[% Env("CGIHandle") %]" method="post" enctype="multipart/form-data">
        <input type="hidden" name="Source" value="[% Data.Source %]" />
        <input type="hidden" name="Target" value="[% Data.Target %]" />
        <input type="hidden" name="ClassID" value="[% Data.ClassID %]" />
        <input type="hidden" name="ItemID" value="[% Data.ItemID %]" />
        <input type="hidden" name="CallingAction" value="[% Data.CallingAction %]" />
        <table class="DataTable">
            <thead>
                <tr>
[% RenderBlockStart("TableComplexBlockColumn") %]
                    <th class="DashboardHeader [% Data.OrderCSS %]" data-column="[% Data.Sortable %]" title="[% Data.SortTitle | html %]">
[% IF Data.Sortable %]
                        <a class="SortColumn" href="#" >[% Translate(Data.Content) | html %]</a>
[% ELSE %]
                        <span class="Gray" >[% Translate(Data.Content) | html %]</span>
[% END %]
                    </th>
[% RenderBlockEnd("TableComplexBlockColumn") %]
                </tr>
            </thead>
            <tbody>
[% RenderBlockStart("TableComplexBlockRow") %]
                <tr class="[% Data.HighlightClass %]" style="[% Data.CustomCSSStyle %]">
[% RenderBlockStart("TableComplexBlockRowColumn") %]
                    <td class="LinkedObjects" >
                        [% Data.Content %]
                    </td>
[% RenderBlockEnd("TableComplexBlockRowColumn") %]
[% RenderBlockStart("TableComplexBlockRowColumnFilter") %]
                    <td colspan="100%">
                        <p class="SpacingTop Center">[% Translate("The filter settings you selected did not produce any results.") %]</p>
                    </td>
[% RenderBlockEnd("TableComplexBlockRowColumnFilter") %]
                </tr>
[% RenderBlockEnd("TableComplexBlockRow") %]
            </tbody>
        </table>
    </form>
[% RenderBlockStart("TableComplexBlockFooterNormal") %]
[% RenderBlockEnd("TableComplexBlockFooterNormal") %]

[% RenderBlockStart("TableComplexBlockFooterAdd") %]
        <div class="SpacingTopSmall">
            [% Data.LinkTypeStrg %]
            <button class="Primary" id="AddLinks" name="AddLinks" type="submit" title="[% Translate("Add links") | html %]">[% Translate("Add links") | html %]</button>
        </div>
        <input type="hidden" name="SubmitLink" value="[% Translate("Link") | html %]" />
[% RenderBlockEnd("TableComplexBlockFooterAdd") %]

[% RenderBlockStart("TableComplexBlockFooterDelete") %]
        <div class="SpacingTopSmall">
            <button class="Primary CallForAction" type="submit" title="[% Translate("Delete links") | html %]"><span>[% Translate("Delete links") | html %]</span></button>
        </div>
        <input type="hidden" name="SubmitDelete" value="[% Translate("Delete") | html %]" />
[% RenderBlockEnd("TableComplexBlockFooterDelete") %]

    </div>
[% IF !Data.AJAX.defined %]
</div>
[% END %]
[% RenderBlockEnd("TableComplexBlock") %]

[% WRAPPER JSOnDocumentComplete %]
<script type="text/javascript">//<![CDATA[
    $(".LinkObjectContent").each(function () {
        var $WidgetElement = $(this).parent('div'),
            ContentDivID   = Core.UI.GetID($(this));

        // fallback to Expanded if default state was not given
        if (!$WidgetElement.hasClass('Expanded') && !$WidgetElement.hasClass('Collapsed')){
            $WidgetElement.addClass('Expanded');
        }

        $WidgetElement.find('.WidgetAction.Toggle')
            .attr('aria-controls', ContentDivID)
            .attr('aria-expanded', $WidgetElement.hasClass('Expanded'))
            .off('click.WidgetToggle')
            .on('click.WidgetToggle', function (Event) {
                var $WidgetElement = $(this).closest("div.Header").parent('div'),
                    Animate = $WidgetElement.hasClass('Animate'),
                    $that = $(this);

                function ToggleWidget() {
                    $WidgetElement
                        .toggleClass('Collapsed')
                        .toggleClass('Expanded')
                        .end()
                        .end()
                        .attr('aria-expanded', $that.closest("div.Header").parent('div').hasClass('Expanded'));
                        Core.App.Publish('Event.UI.ToggleWidget', [$WidgetElement]);
                }

                if (Animate && Core.Config.Get('AnimationEnabled')) {
                    $WidgetElement.addClass('AnimationRunning').find('.Content').slideToggle("fast", function () {
                        ToggleWidget();
                        $WidgetElement.removeClass('AnimationRunning');
                    });
                } else {
                    ToggleWidget();
                }

                Event.preventDefault();
                Event.stopPropagation();
            });
    });

    $('.LinkedObjects > input[type=checkbox]').on('click', function (Event) {
        Event.stopPropagation();
    });
    $('.MasterAction').on('click', function (Event) {
        var $MasterActionLink = $(this).find('.MasterActionLink');
        // prevent MasterAction on Dynamic Fields links
        if ($(Event.target).hasClass('DynamicFieldLink')) {
            return true;
        }
        // only act if the link was not clicked directly
        if (Event.target !== $MasterActionLink.get(0)) {
            if (Event.ctrlKey || Event.metaKey) {
                window.open($MasterActionLink.attr('href'));
            }
            else {
                window.location = $MasterActionLink.attr('href');
            }
            return false;
        }
    });
//]]></script>
[% END %]
[% RenderBlockEnd("TableComplex") %]

[% WRAPPER JSOnDocumentComplete %]
<script type="text/javascript">//<![CDATA[
    $('.SelectAll').on('click', function () {
        var Status = $(this).prop('checked');
        $(this).closest('.WidgetSimple').find('table input[type=checkbox]').prop('checked', Status);
    });

    $('.SortColumn').off('click').on('click', function(Event) {
        var sortBy  = $(this).closest('th').attr('data-column'),
            orderBy = 'Down',
            Ingore  = {},
            Action  = $(this).closest('form').children('input[name=CallingAction]').val(),
            LinkPage;

        if ( $(this).closest('th').hasClass('SortDescendingLarge') ) {
            orderBy = 'Up';
        }

        Ingore['ChallengeToken'] = '1';
        $.each($('.ColumnFilter'), function() {
            Ingore[$(this).attr('name')] = '1';
        });

        if (
            Action === 'AgentLinkObject'
        ) {
            Ingore['Source'] = '1';
            Ingore['ItemID'] = '1';
        }

        LinkPage = Core.AJAX.SerializeForm($(this).closest('form'), Ingore);
        LinkPage += ';OrderBy=' + orderBy;
        LinkPage += ';SortBy=' + sortBy;

        if (
            Action === 'AgentLinkObject'
        ) {
            LinkPage += ';Source=' + $('input[name="SourceObject"]').val();
            LinkPage += ';ItemID=' + $('input[name="SourceKey"]').val();
        }

        if (
            Action === 'AgentITSMConfigItemZoomTabLinkedObjects'
            && $(this).closest('.Content').find('.WidgetActionBox').length
        ) {
            $(this).closest('.Content')
                .find('.WidgetActionBox')
                .addClass('Hidden')
                .appendTo( $(this).closest('.MainBox') );

            Core.AJAX.ContentUpdate(
                $(this).closest('.MainBox').find('.Content'),
                '[% Env("Baselink") %]Action=LinkObjectAJAXHandler;Name=[% Data.Name | html %];' + LinkPage, function () {
                    $('.WidgetActionBox.Hidden')
                        .appendTo( $('.WidgetActionBox.Hidden')
                        .closest('.MainBox')
                        .find('div.Bottom') )
                        .removeClass('Hidden');
                }
            );
        } else {
            Core.AJAX.ContentUpdate(
                $(this).closest('.WidgetSimple').find('.Content'),
                '[% Env("Baselink") %]Action=LinkObjectAJAXHandler;Name=[% Data.Name | html %];' + LinkPage, function () {}
            );
        }

        Event.preventDefault();
        return false;
    });

    $('.ColumnSettingsTrigger').off('click').on('click', function() {

        var $TriggerObj = $(this),
            $ColumnSettingsContainer = $TriggerObj.next('.ColumnSettingsContainer'),
            FilterName;

        if ($TriggerObj.hasClass('Active')) {

            $TriggerObj
                .next('.ColumnSettingsContainer')
                .find('.ColumnSettingsBox')
                .fadeOut('fast', function() {
                    $TriggerObj.removeClass('Active');
                });
        }
        else {

            // slide up all open settings widgets
            $('.ColumnSettingsTrigger')
                .next('.ColumnSettingsContainer')
                .find('.ColumnSettingsBox')
                .fadeOut('fast', function() {
                    $(this).parent().prev('.ColumnSettingsTrigger').removeClass('Active');
                });

            // show THIS settings widget
            $ColumnSettingsContainer
                .find('.ColumnSettingsBox')
                .fadeIn('fast', function() {

                    $TriggerObj.addClass('Active');

                    // only show and use the delete filter icon in case of autocomplete fields
                    // because in regular dropdowns we have a different way to delete the filter
                    if ($TriggerObj.closest('th').hasClass('FilterActive') && $ColumnSettingsContainer.find('select.ColumnFilter').hasClass('Hidden')) {
                        $ColumnSettingsContainer
                            .find('.DeleteFilter')
                            .removeClass('Hidden')
                            .off()
                            .on('click', function() {
                                $(this)
                                    .closest('.ColumnSettingsContainer')
                                    .find('select')
                                    .val('DeleteFilter')
                                    .trigger('change');

                                return false;
                            });
                    }

                    // refresh filter dropdown
                    FilterName = $ColumnSettingsContainer
                        .find('select')
                        .attr('name');

                    if ( $TriggerObj.closest('th').hasClass('CustomerID') || $TriggerObj.closest('th').hasClass('CustomerUserID') || $TriggerObj.closest('th').hasClass('Responsible') || $TriggerObj.closest('th').hasClass('Owner') ) {

                        if (!$TriggerObj.parent().find('.SelectedValue').length) {
                            Core.AJAX.FormUpdate($TriggerObj.parents('form'), 'AJAXFilterUpdate', FilterName, [ FilterName ], function() {
                                var AutoCompleteValue = $ColumnSettingsContainer
                                        .find('select')
                                        .val(),
                                    AutoCompleteText  = $ColumnSettingsContainer
                                        .find('select')
                                        .find('option:selected')
                                        .text();

                                if (AutoCompleteValue !== 'DeleteFilter') {

                                    $ColumnSettingsContainer
                                        .find('select')
                                        .after('<span class="SelectedValue Hidden"><span title="' + AutoCompleteText + ' (' + AutoCompleteValue + ')">' + AutoCompleteText + ' (' + AutoCompleteValue + ')</span></span>');
                                }
                            }, 'LinkObjectAJAXHandler');
                        }
                    }
                    else {
                        Core.AJAX.FormUpdate($TriggerObj.parents('form'), 'AJAXFilterUpdate', FilterName, [ FilterName ], function() {}, 'LinkObjectAJAXHandler');
                    }
            });
        }

        return false;
    });
//]]></script>
[% END %]

[% RenderBlockStart("FilterColumnSettings") %]
<div id="ContextSettingsDialogContainer-[% Data.PreferencesID %]" class="Hidden">
    <form action="[% Env("CGIHandle") %]" method="post" id="ContextSettingsDialogOverview[% Data.View | html %]" class="WidgetSettingsForm">
        <input type="hidden" name="Action" value="AgentPreferences"/>
        <input type="hidden" name="Subaction" value="Update"/>
        <input type="hidden" name="FilterAction" value="[% Data.Name | html %]"/>
        <input type="hidden" name="Group" value="[% Data.GroupName | html %]"/>
        <input type="hidden" name="RedirectURL" value="[% Data.RequestedURL | html %]"/>
        <input type="hidden" class="ColumnsEnabledJSON" value="[% Data.ColumnsEnabled | html %]" />
        <input type="hidden" class="ColumnsAvailableJSON" value="[% Data.ColumnsAvailable | html %]" />
        <fieldset class="TableLike FixedLabelSmall">
            <label class="DontPrint" for="[% Data.NamePref | html %]">[% Translate(Data.Desc) | html %]:</label>
            <div class="Field DontPrint LayoutGrid AllocationListContainer">
                <div class="Size1of2">
                    <ul class="Tablelike">
                        <li class="Header">[% Translate("Available Columns") | html %]</li>
                    </ul>
                    <div class="FilterInputContainer">
                        <input type="text" class="FilterAvailableFields" name="FilterAvailableFields" value="" title="[% Translate("Filter available fields") | html %]" placeholder="[% Translate("Filter available fields") | html %]..." />
                    </div>
                    <ul class="AllocationList Tablelike AvailableFields SettingsOverview" id="AvailableField-Dashboard[% Data.Name | html %]"></ul>
                </div>
                <div class="Size1of2">
                    <ul class="Tablelike">
                        <li class="Header">[% Translate("Visible Columns (order by drag & drop)") | html %]</li>
                    </ul>
                    <ul class="AllocationList Tablelike AssignedFields OrderNumbers SettingsOverview" id="AssignedFields-Dashboard[% Data.Name | html %]"></ul>
                </div>
            </div>
            <div class="Clear"></div>
        </fieldset>
    </form>
</div>
[% WRAPPER JSOnDocumentComplete %]
<script type="text/javascript">//<![CDATA[
$("#SetColumnPreferences_[% Data.PreferencesID %]").on('click', function (Event) {
    var Action = '[% Env("Action") %]';

    if ( Action.match(/AgentLinkObject/) ) {
        $('#ContextSettingsDialogContainer-[% Data.PreferencesID %]').remove().appendTo("body");
    }

    Core.UI.Dialog.ShowContentDialog($('#ContextSettingsDialogContainer-[% Data.PreferencesID %]'), [% Translate("Settings") | JSON %], '15%', 'Center', true,
        [
            {
                Label: [% Translate("Submit") | JSON %],
                Type: 'Submit',
                Class: 'Primary',
                Function: function () {
                    var $ListContainer = $('.AllocationListContainer').find('.AssignedFields'),
                        $FieldObj,
                        Container = '[% Data.PreferencesID %]$',
                        Regexp   = new RegExp(Container.replace('_','-'), 'g');

                    if (isJQueryObject($ListContainer) && $ListContainer.length) {
                        var SelectedElements = new Array();
                        $.each($ListContainer.find('li'), function() {


                            var Found = 0;
                            $.each( $(this).closest('form').find('input[name="FilterAction"]'), function() {
                                if ( $(this).val().match(Regexp) ) {
                                    Found = 1;
                                }
                            });

                            if ( Found == 1 && SelectedElements.indexOf($(this).attr('data-fieldname')) == -1 ) {
                                $FieldObj = $('<input />').attr('name', 'UserFilterColumnsEnabled').attr('type', 'hidden').attr('value', $(this).attr('data-fieldname'));
                                $ListContainer.append($FieldObj);
                                SelectedElements.push($(this).attr('data-fieldname'));
                            }
                        });
                    }
                    return true;
                }
            }
        ], true);
    Event.preventDefault();
    Event.stopPropagation();
    Core.Agent.TableFilters.SetAllocationList('[% Data.PreferencesID %]$');
    return false;
});

Core.Config.AddConfig({
[% RenderBlockStart("ColumnTranslation") %]
    'Column[% Data.ColumnName | html %]': [% Translate(Data.TranslateString) | JSON %][% RenderBlockStart("ColumnTranslationSeparator") %],[% RenderBlockEnd("ColumnTranslationSeparator") %]
[% RenderBlockEnd("ColumnTranslation") %]
});

//]]></script>
[% END %]
[% RenderBlockEnd("FilterColumnSettings") %]